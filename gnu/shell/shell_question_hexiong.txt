1.shell脚本 第一行的#!/bin/sh 具有什么意义？
    答：实际上，在每个脚本的开头都使用"#!"，这意味着告诉系统这个文件需要指定一个解释器。#!实际上是指定一个文件类型的特殊标记，换句话说，在这种情况下，指的就是一个可执行的脚本。在#!之后接着的是一个路径名。这个路径名指定了一个解释脚本中命令的程序，这个程序可以是shell，程序语言或者是任意一个通用程序。这个指定的程序从头开始解释并且执行脚本中的命令（从#!的下一行开始执行），忽略注释。
    如：
    1 #!/bin/sh
    2 #!/bin/bash
    3 #!/usr/bin/perl
    4 #!/usr/bin/tcl
    5 #!/bin/sed -f
    6 #!/usr/awk -f
    上面每一个脚本头的行都指定了一个不同的命令解释器，如果是/bin/sh，那么就是默认shell（在linux系统中默认是bash）。使用#!/bin/sh，在大多数商业发行的UNIX上，默认是Bourne shell，这将让你的脚本可以正常运行在非Linux机器上，虽然这将会牺牲Bash一些独特的特征。脚本将与POSIX的sh标准相一致。
    注意：#!后边给出的路径必须是正确的，否则会出现一个错误消息，通常是"Command not found",这将是运行脚本产生的惟一结果。当然"#!"也可以被忽略，不过这样你的脚本文件就只能是一些命令的集合，不能够使用shell内建的指令了，如果不能使用变量的话，当然也就失去了脚本编程的意义。

2.什么是局部变量和环境变量，有什么区别，如何添加新的环境变量？
答：如果变量用local来声明，那么它只能在该变量声明的代码块中可见。这个代码块就是局部“范围”。在一个函数内，局部变量意味着只能在函数代码块内它才有意义。
    shell环境变量是所有shell程序都会接受的参数，这种变量将改变用户接口和shell的行为。在一般的上下文中，每个进程都有自己的环境，就是一组保持进程可能引用的信息的变量。这种情况下，shell与一个一般进程是相同的。每当shell启动时，它都将创建自己的环境变量。更新或者添加新的环境变量，将导致shell更新它的环境，同时也会影响所有继承自这个环境的所有子进程。如果一个脚本设置了环境变量,需要export它来通知本脚本的环境，脚本只能对它产生的子进程export变量。一个从命令行被调用的脚本export的变量，将不能影响调用这个脚本的那个命令行shell的环境。
    局部变量与环境变量的区别在于环境变量的范围较大，可以做用于自己及所有继承自这个环境的所有子进程而局部变量的作用范围则要小很多，只能作用于声明该变量的代码块中。

3.bash的启动脚本有哪些，交互式登录shell与交互式非登录shell在执行启动脚本上有什么区别？
答：bash的启动脚本：
    1.作为交互登录的Shell启动
    2.以交互非登录Shell启动
    3.非交互启动
    4.以sh命令启动
    作为交互登录Shell启动：
    交互Shell是指用户在提示符下输命令的Shell而非执行脚本的Shell，登录Shell就是在输入用户名和密码登录后得到的Shell，比如从字符终端登录或者用telnet/ssh从远程登录，但是从图形界面的窗口管理器登录之后会显示桌面而不会产生登录Shell（也不会执行启动脚本），在图形界面下打开终端窗口得到的Shell也不是登录Shell。
    这样启动bash会自动执行以下脚本：
    首先执行/etc/profile，系统中每个用户登录时都要执行这个脚本，如果系统管理员希望某个设置对所有用户都生效，可以写在这个脚本里
    然后依次查找当前用户主目录的~/.bash_profile、~/.bash_login和~/.profile三个文件，找到第一个存在并且可读的文件来执行，如果希望某个设置只对当前用户生效，可以写在这个脚本里，由于这个脚本在/etc/profile之后执行，/etc/profile设置的一些环境变量的值在这个脚本中可以修改，也就是说，当前用户的设置可以覆盖（Override）系统中全局的设置。~/.profile这个启动脚本是sh规定的，bash规定首先查找以~/.bash_开头的启动脚本，如果没有则执行~/.profile，是为了和sh保持一致。
    顺便一提，在退出登录时会执行~/.bash_logout脚本（如果它存在的话）。
    以交互式非登录Shell启动
    比如在图形界面下开一个终端窗口，或者在登录Shell提示符下再输入bash命令，就得到一个交互非登录的Shell，这种Shell在启动时自动执行~/.bashrc脚本。为了使登录Shell也能自动执行~/.bashrc，通常在~/.bash_profile中调用~/.bashrc

4.shell中的双引号，单引号，反引号有什么作用？
答：单引号
    由单引号括起来的字符都作为普通字符出现。特殊字符用单引号括起来以后，也会失去原有意义，而只作为普通字符解释。
    双引号
    由双引号括起来的字符，除$、、’、和”这几个字符仍是特殊字符并保留其特殊功能外，其余字符仍作为普通字符对待。对于$来说，就是用其后指定的变量的值来代替这个变量和$；对于而言，是转义字符，它告诉shell不要对其后面的那个字符进行特殊处理，只当作普通字符即可。可以想见，在双引号中需要在前面加上的只有四个字符$，，’和”本身。而对”号，若其前面没有加，则Shell会将它同前一个”号匹配。
    反引号
    反引号括起来的字符串被shell解释为命令行，在执行时，shell首先执行该命令行，并以它的标准输出结果取代整个反引号（包括两个反引号）部分。
